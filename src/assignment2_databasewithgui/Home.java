/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment2_databasewithgui;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Kawya
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Assignment2_GUI
     */
    Connection con1;
    PreparedStatement insert;  
    static String user;
    public static int searchID;
    public static String rebook;
    public Book book;
    public DVD dvd;
    public ReferenceBook rbook;
    public static String due;
    
    public Home(String user) {
        initComponents();
        connection();
        clock();
        this.user = user;
        time.setEnabled(false);
        date.setEnabled(false);
    }
    public void Logo(){
        try{
            this.setIconImage(ImageIO.read(new File("book.png")));
        }
        catch(IOException ex){
            System.out.println("Error Logo"+ex);
        }
    }
    public Thread clock(){
        Thread clock = new Thread(){
            public void run(){
                String months[] = { "January", "February", "March", "April",   
                           "May", "June", "July", "August",   
                           "September", "October", "November", "December" }; 
                String amPM[] = { "AM", "PM"};
                try{
                    for(;;){
                        Calendar cal = new GregorianCalendar();
                        int day = cal.get(Calendar.DAY_OF_MONTH);
                        int monthi = cal.get(Calendar.MONTH);
                        int year = cal.get(Calendar.YEAR);
                        
                        int second=cal.get(Calendar.SECOND);
                        int minute=cal.get(Calendar.MINUTE);
                        int hour = cal.get(Calendar.HOUR);
                        int amPm = cal.get(Calendar.AM_PM);

                        
                        time.setText("Time : "+hour+":"+minute+":"+second+" "+amPM[amPm]);
                        date.setText("Date : "+year+" "+months[monthi]+" "+day);
                        sleep(1000);
                    }
                }
                catch(InterruptedException ex){
                    ex.printStackTrace();
                }
            }
        };
        clock.start();
        return clock;

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        welcome = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        books = new javax.swing.JRadioButton();
        dvds = new javax.swing.JRadioButton();
        returnLibItem = new javax.swing.JButton();
        addLibItem = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        issueLibItem = new javax.swing.JButton();
        TabbedPaneHome = new javax.swing.JTabbedPane();
        tabbedBook = new javax.swing.JScrollPane();
        tableBooks = new javax.swing.JTable();
        tabbedDVDs = new javax.swing.JScrollPane();
        tableDVDs = new javax.swing.JTable();
        searchBar = new javax.swing.JTextField();
        serach = new javax.swing.JLabel();
        Serach = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        renew = new javax.swing.JButton();
        filter = new javax.swing.JComboBox<>();
        FilterLable = new javax.swing.JLabel();
        settings = new javax.swing.JButton();
        timeBar = new javax.swing.JMenuBar();
        time = new javax.swing.JMenu();
        date = new javax.swing.JMenu();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management System 1.0v - Home");

        welcome.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        welcome.setText("Welcome,");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Table"));

        buttonGroup1.add(books);
        books.setText("Books");
        books.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booksActionPerformed(evt);
            }
        });

        buttonGroup1.add(dvds);
        dvds.setText("DVDs");
        dvds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dvdsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dvds, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(books, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(books)
                .addGap(18, 18, 18)
                .addComponent(dvds)
                .addGap(15, 15, 15))
        );

        returnLibItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/return.png"))); // NOI18N
        returnLibItem.setText(" Return Library Item");
        returnLibItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnLibItemActionPerformed(evt);
            }
        });

        addLibItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus.png"))); // NOI18N
        addLibItem.setText("Add Library Item");
        addLibItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLibItemActionPerformed(evt);
            }
        });

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shutdown.png"))); // NOI18N
        logout.setText("Log out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        issueLibItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check-out.png"))); // NOI18N
        issueLibItem.setText(" Issue Library Item");
        issueLibItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueLibItemActionPerformed(evt);
            }
        });

        tableBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "bookID", "Item Name", "Author Name", "ISBN Number", "Refence Book", "Course", "Loaned", "Loaner Name", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBooksMouseClicked(evt);
            }
        });
        tabbedBook.setViewportView(tableBooks);
        if (tableBooks.getColumnModel().getColumnCount() > 0) {
            tableBooks.getColumnModel().getColumn(0).setPreferredWidth(4);
            tableBooks.getColumnModel().getColumn(6).setPreferredWidth(4);
        }

        TabbedPaneHome.addTab("Books", tabbedBook);

        tableDVDs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DVD ID", "Item Name", "	Director Name", "Studio", "Subtitled", "Loaned", "Loaner", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDVDs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDVDsMouseClicked(evt);
            }
        });
        tabbedDVDs.setViewportView(tableDVDs);
        if (tableDVDs.getColumnModel().getColumnCount() > 0) {
            tableDVDs.getColumnModel().getColumn(0).setPreferredWidth(4);
            tableDVDs.getColumnModel().getColumn(5).setPreferredWidth(4);
        }

        TabbedPaneHome.addTab("DVDs", tabbedDVDs);

        searchBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBarMouseClicked(evt);
            }
        });
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBarKeyPressed(evt);
            }
        });

        serach.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        serach.setText("Serach books by ID");

        Serach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/searching.png"))); // NOI18N
        Serach.setText("Search");
        Serach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SerachActionPerformed(evt);
            }
        });

        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clear.png"))); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        renew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update.png"))); // NOI18N
        renew.setText("Renew");
        renew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewActionPerformed(evt);
            }
        });

        filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "For issue", "For renew" }));
        filter.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                filterCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });
        filter.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                filterPropertyChange(evt);
            }
        });

        FilterLable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FilterLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filter.png"))); // NOI18N
        FilterLable.setText("Filter");

        settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settings.png"))); // NOI18N
        settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });

        timeBar.setBackground(new java.awt.Color(0, 0, 0));
        timeBar.setForeground(new java.awt.Color(204, 204, 255));

        time.setText("Time");
        timeBar.add(time);

        date.setText("Date");
        timeBar.add(date);

        setJMenuBar(timeBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(returnLibItem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(issueLibItem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addLibItem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(renew, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serach, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Serach, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FilterLable, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TabbedPaneHome, javax.swing.GroupLayout.PREFERRED_SIZE, 1007, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(settings)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addLibItem, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(issueLibItem, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(renew, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(returnLibItem, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(settings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serach)
                            .addComponent(Serach, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FilterLable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addComponent(TabbedPaneHome, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(34, 34, 34))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void connection() {
        try {
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/assignment2_gui","root","");
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void setEmptySearchBar(){
        searchBar.setText("");
    }
    private void issueLibItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueLibItemActionPerformed
        // TODO add your handling code here:

        if(searchBar.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please select or enter ID to issue Item","Warning !",JOptionPane.WARNING_MESSAGE);
        else{
            try {
                if(books.isSelected()){
                    insert = con1.prepareStatement("select * from books where bookID=? ");
                }
                else{

                    insert = con1.prepareStatement("select * from dvds where dvdID=? ");
                }
                searchID = Integer.parseInt(searchBar.getText());
                insert.setInt(1, searchID);
                ResultSet rs = insert.executeQuery();
                
                if(books.isSelected()){
                    if(rs.next()==true){
                        rebook = rs.getString("referBook");
                        if(rebook.equals("Yes"))
                            JOptionPane.showMessageDialog(this, "You can't CheckOut Reference Books","Warning !",JOptionPane.WARNING_MESSAGE);  
                        else{
                            if(rs.getString("loaner").equals("")){
                                book = new Book (rs.getString("bookName"),21,rs.getString("ISBN"),rs.getString("authorName"));
                                BookCheckOut obj = new BookCheckOut(book,this);
                                obj.setVisible(true);
                                obj.Logo();
                            }
                            else
                                JOptionPane.showMessageDialog(this, "Already checkedout !","Warning !",JOptionPane.WARNING_MESSAGE);  
                        }
                    }
                    else{
                        this.booksTable_update();
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{

                    if(rs.next()==true){
                        if(rs.getString("loaner").equals("")){
                                if(rs.getString("Subtitled").equals("Yes"))
                                    dvd = new DVD(rs.getString("ItemName"),rs.getString("directorName"),rs.getString("makerStudio"),true);
                                else
                                    dvd = new DVD(rs.getString("ItemName"),rs.getString("directorName"),rs.getString("makerStudio"),false);

                            DVDcheckOut obj = new DVDcheckOut(dvd,this);
                            obj.setVisible(true);
                            obj.Logo();
                        }
                        else
                                JOptionPane.showMessageDialog(this, "Already checkedout !","Warning !",JOptionPane.WARNING_MESSAGE);  
                    }
                     else{
                        this.dvdTable_update();
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_issueLibItemActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(this, "Do you want to logout ?","LogOut",JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION){
            LogIn objLog = new LogIn();
            objLog.show();
            this.dispose();
            this.clock().stop();
            try{
                objLog.setIconImage(ImageIO.read(new File("book.png")));
            }
            catch(IOException ex){
                System.out.println("Error Logo"+ex);
            }
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void addLibItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLibItemActionPerformed
        // TODO add your handling code here:

        Addselection obj = new Addselection(this);
        obj.show();
        try{
            obj.setIconImage(ImageIO.read(new File("book.png")));
        }
        catch(IOException ex){
            System.out.println("Error Logo"+ex);
        }

    }//GEN-LAST:event_addLibItemActionPerformed

    public boolean isDVDslect(){
        return dvds.isSelected();
    }
    private void dvdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dvdsActionPerformed
        // TODO add your handling code here:
        searchBar.setText("");
        this.dvdTable_update();
        TabbedPaneHome.setSelectedIndex(1);
    }//GEN-LAST:event_dvdsActionPerformed

    private void booksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booksActionPerformed
        // TODO add your handling code here:
        searchBar.setText("");
        this.booksTable_update();
        TabbedPaneHome.setSelectedIndex(0);


    }//GEN-LAST:event_booksActionPerformed

    private void SerachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SerachActionPerformed
        // TODO add your handling code here:
        int c;
        if(searchBar.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Search is Empty ","Warning !",JOptionPane.WARNING_MESSAGE);
        else{
            try {
                if(books.isSelected()){
                    insert = con1.prepareStatement("select * from books where bookID=? ");
                }
                else{

                    insert = con1.prepareStatement("select * from dvds where dvdID=? ");
                }
                searchID = Integer.parseInt(searchBar.getText());
                insert.setInt(1, searchID);
                ResultSet rs = insert.executeQuery();
                ResultSetMetaData Rss = rs.getMetaData();
                c = Rss.getColumnCount();
                
                if(books.isSelected()){
                    DefaultTableModel Df = (DefaultTableModel)tableBooks.getModel();
                    Df.setRowCount(0);
                    if(rs.next()==true){
                        Vector v1 = new Vector();

                            v1.add(rs.getString("bookID"));
                            v1.add(rs.getString("bookName"));
                            v1.add(rs.getString("authorName"));
                            v1.add(rs.getString("ISBN"));
                            v1.add(rs.getString("referBook"));
                            v1.add(rs.getString("course"));
                            v1.add(rs.getString("loaned"));
                            v1.add(rs.getString("loaner"));
                            v1.add(rs.getString("dueDate"));
                        
                        Df.addRow(v1);
                    }
                    else{
                        this.booksTable_update();
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{
                    DefaultTableModel Df = (DefaultTableModel)tableDVDs.getModel();
                    Df.setRowCount(0);
                    if(rs.next()==true){
                        Vector v1 = new Vector();

                            v1.add(rs.getString("dvdID"));
                            v1.add(rs.getString("ItemName"));
                            v1.add(rs.getString("directorName"));
                            v1.add(rs.getString("makerStudio"));
                            v1.add(rs.getString("Subtitled"));
                            v1.add(rs.getString("loaned"));
                            v1.add(rs.getString("loaner"));
                            v1.add(rs.getString("dueDate"));

                        Df.addRow(v1);

                    }
                     else{
                        this.dvdTable_update();
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_SerachActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_searchBarActionPerformed

    private void searchBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBarMouseClicked
        // TODO add your handling code here:
        searchBar.setText("");
    }//GEN-LAST:event_searchBarMouseClicked

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        
        if(books.isSelected()){
            serach.setText("Search books by ID");
            this.booksTable_update();
            searchBar.setText("");
        }
        else {
            serach.setText("Search DVDs by ID");
            this.dvdTable_update();
            searchBar.setText("");
        }
    }//GEN-LAST:event_clearActionPerformed

    private void tableBooksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBooksMouseClicked
        // TODO add your handling code here:
        int i= tableBooks.getSelectedRow();
        TableModel model = tableBooks.getModel();
        searchBar.setText(model.getValueAt(i, 0).toString());

    }//GEN-LAST:event_tableBooksMouseClicked

    private void tableDVDsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDVDsMouseClicked
        // TODO add your handling code here:
        int i= tableDVDs.getSelectedRow();
        TableModel model = tableDVDs.getModel();
        searchBar.setText(model.getValueAt(i, 0).toString());

    }//GEN-LAST:event_tableDVDsMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        if(searchBar.getText()=="")
            JOptionPane.showMessageDialog(this, "Enter ID or Select from table to delete","Delete not Done",JOptionPane.WARNING_MESSAGE);
        try {
            
            if(books.isSelected()){
                    insert = con1.prepareStatement("delete from books where bookID=? ");
                    searchID =  Integer.parseInt(searchBar.getText());
                    insert.setInt(1, searchID);
                    JOptionPane.showMessageDialog(this, "Book Deleted","Alert",JOptionPane.INFORMATION_MESSAGE);
                    insert.execute();
                    this.booksTable_update();
                    searchBar.setText("");
                    }
                    else{
                        insert = con1.prepareStatement("delete from dvds where dvdID=? ");
                        searchID =  Integer.parseInt(searchBar.getText());
                        insert.setInt(1, searchID);
                        JOptionPane.showMessageDialog(this, "DVD Deleted","Alert",JOptionPane.INFORMATION_MESSAGE);
                        insert.execute();
                        this.dvdTable_update();
                        searchBar.setText("");
                    }
        } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning ! - Delete not Done",JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_deleteActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        // TODO add your handling code here:
    try{
        if(filter.getSelectedItem().toString().equals("None")){
            if(books.isSelected()){
                this.booksTable_update();
            }
            else {
                this.dvdTable_update();
            }
        }
        else if(filter.getSelectedItem().toString().equals("For issue")){
                if(dvds.isSelected()){
                    int c;
                    insert = con1.prepareStatement("select * from dvds where loaned=?");
                    insert.setString(1,"No");
                    ResultSet rs = insert.executeQuery();
                    ResultSetMetaData Rss = rs.getMetaData();
                    c = Rss.getColumnCount();

                        DefaultTableModel Df = (DefaultTableModel)tableDVDs.getModel();
                        Df.setRowCount(0);
                        if(rs.next()==true){
                            Vector v1 = new Vector();

                                v1.add(rs.getString("dvdID"));
                                v1.add(rs.getString("ItemName"));
                                v1.add(rs.getString("directorName"));
                                v1.add(rs.getString("makerStudio"));
                                v1.add(rs.getString("Subtitled"));
                                v1.add(rs.getString("loaned"));
                                v1.add(rs.getString("loaner"));
                                v1.add(rs.getString("dueDate"));

                            Df.addRow(v1);

                        }
                }else{
                     int c;
                    insert = con1.prepareStatement("select * from books where loaned=? and referBook=?");
                    insert.setString(1,"No");
                    insert.setString(2,"No");
                    ResultSet rs = insert.executeQuery();
                    ResultSetMetaData Rss = rs.getMetaData();
                    c = Rss.getColumnCount();

                        DefaultTableModel Df = (DefaultTableModel)tableBooks.getModel();
                        Df.setRowCount(0);
                        if(rs.next()==true){
                            Vector v1 = new Vector();

                                v1.add(rs.getString("bookID"));
                                v1.add(rs.getString("bookName"));
                                v1.add(rs.getString("authorName"));
                                v1.add(rs.getString("ISBN"));
                                v1.add(rs.getString("referBook"));
                                v1.add(rs.getString("course"));
                                v1.add(rs.getString("loaned"));
                                v1.add(rs.getString("loaner"));
                                v1.add(rs.getString("dueDate"));

                            Df.addRow(v1);

                        }
                }
            }
        else{
            if(dvds.isSelected()){
                     JOptionPane.showMessageDialog(this, "DVDs can't renew","Warning !",JOptionPane.WARNING_MESSAGE);
                     this.dvdTable_update();
                     filter.setSelectedIndex(0);
            }else{
                     int c;
                    insert = con1.prepareStatement("select * from books where loaned=? and referBook=? ");
                    insert.setString(1,"Yes");
                    insert.setString(2,"No");
                    ResultSet rs = insert.executeQuery();
                    ResultSetMetaData Rss = rs.getMetaData();
                    c = Rss.getColumnCount();

                        DefaultTableModel Df = (DefaultTableModel)tableBooks.getModel();
                        Df.setRowCount(0);
                        if(rs.next()==true){
                            Vector v1 = new Vector();

                                v1.add(rs.getString("bookID"));
                                v1.add(rs.getString("bookName"));
                                v1.add(rs.getString("authorName"));
                                v1.add(rs.getString("ISBN"));
                                v1.add(rs.getString("referBook"));
                                v1.add(rs.getString("course"));
                                v1.add(rs.getString("loaned"));
                                v1.add(rs.getString("loaner"));
                                v1.add(rs.getString("dueDate"));

                            Df.addRow(v1);

                        }
                }
        }
    }
    catch(SQLException ex){
                    System.out.println(ex);
    }
    }//GEN-LAST:event_filterActionPerformed

    private void filterPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_filterPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_filterPropertyChange

    private void filterCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_filterCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_filterCaretPositionChanged

    private void renewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewActionPerformed
        // TODO add your handling code here:

        this.connection();
        if(searchBar.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please select or enter ID to issue Item","Warning !",JOptionPane.WARNING_MESSAGE);
        else{
            try {
                if(books.isSelected()){
                    insert = con1.prepareStatement("select * from books where bookID=? ");
                }
                else{

                    insert = con1.prepareStatement("select * from dvds where dvdID=? ");
                }
                searchID = Integer.parseInt(searchBar.getText());
                insert.setInt(1, searchID);
                ResultSet rs = insert.executeQuery();
                               
                    if(books.isSelected()){
                        if(rs.next()==true){
                            rebook = rs.getString("referBook");
                            if(rebook.equals("Yes"))
                                JOptionPane.showMessageDialog(this, "Can't renew reference books","Warning !",JOptionPane.WARNING_MESSAGE);    
                            else{
                                String p = rs.getString("loaner");
                                if(p.equals(""))
                                JOptionPane.showMessageDialog(this, "This item didn't checkout yet!","Can't Renew",JOptionPane.ERROR_MESSAGE);
                                else{
                                    book = new Book (rs.getString("bookName"),21,rs.getString("ISBN"),rs.getString("authorName"));
                                    book.setloanedTo(rs.getString("loaner"));
                                    due = rs.getString("dueDate");
                                    Renew obj = new Renew(book,this);
                                    obj.setVisible(true);
                                    obj.Logo();
                                }
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    
                    else{
                        JOptionPane.showMessageDialog(this, "DVDs Can't Renew !","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_renewActionPerformed

    private void returnLibItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnLibItemActionPerformed
        // TODO add your handling code here:
         if(searchBar.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please select or enter ID to issue Item","Warning !",JOptionPane.WARNING_MESSAGE);
        else{
            try {
                if(books.isSelected()){
                    insert = con1.prepareStatement("select * from books where bookID=? ");
                }
                else{
                    insert = con1.prepareStatement("select * from dvds where dvdID=? ");
                }
                searchID = Integer.parseInt(searchBar.getText());
                insert.setInt(1, searchID);
                ResultSet rs = insert.executeQuery();
                
                if(books.isSelected()){
                    if(rs.next()==true){
                        rebook = rs.getString("referBook");
                        if(rebook.equals("Yes"))
                            JOptionPane.showMessageDialog(this, "You can't CheckOut Reference Books therefore no return","Warning !",JOptionPane.WARNING_MESSAGE);  
                        else{
                            if(!rs.getString("loaner").equals("")){
                                book = new Book (rs.getString("bookName"),21,rs.getString("ISBN"),rs.getString("authorName"));
                                book.setloanedTo(rs.getString("loaner"));
                                due = rs.getString("dueDate");
                                ReturnBook obj = new ReturnBook(book,this);
                                obj.setVisible(true);
                                obj.Logo();
                            }
                            else
                                JOptionPane.showMessageDialog(this, "Didn't checkedout !","Warning !",JOptionPane.WARNING_MESSAGE);  
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{

                    if(rs.next()==true){
                        if(!rs.getString("loaner").equals("")){
                            if(rs.getString("Subtitled").equals("Yes"))
                                dvd = new DVD(rs.getString("ItemName"),rs.getString("directorName"),rs.getString("makerStudio"),true);
                            else
                                dvd = new DVD(rs.getString("ItemName"),rs.getString("directorName"),rs.getString("makerStudio"),false);
                            dvd.setloanedTo(rs.getString("loaner"));
                            due = rs.getString("dueDate");
                            ReturnDVD obj = new ReturnDVD(dvd,this);
                            obj.setVisible(true);
                            obj.Logo();
                        }
                        else
                                JOptionPane.showMessageDialog(this, "Didn't checkout to return !","Warning !",JOptionPane.WARNING_MESSAGE);  
                    }
                     else{
                        JOptionPane.showMessageDialog(this, "Item Not Found","Warning !",JOptionPane.WARNING_MESSAGE);
                    }
                }
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_returnLibItemActionPerformed

    private void settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        // TODO add your handling code here:
        Settings s = new Settings(this);
        s.setVisible(true);
        s.Logo();
        
    }//GEN-LAST:event_settingsActionPerformed

    private void searchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyPressed
        // TODO add your handling code here:
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            java.awt.event.ActionEvent ev=null;
            SerachActionPerformed(ev);
        }
    }//GEN-LAST:event_searchBarKeyPressed
    
    
    
    public void booksTable_update(){
        int c;
        serach.setText("Serach books by ID");
        books.setSelected(true);
        TabbedPaneHome.setEnabledAt(1, false);
        TabbedPaneHome.setEnabledAt(0, true);
        TabbedPaneHome.setSelectedIndex(0);
            try {
                
                insert = con1.prepareStatement("select * from books");
                ResultSet rs = insert.executeQuery();
                ResultSetMetaData Rss = rs.getMetaData();
                c = Rss.getColumnCount();

                DefaultTableModel Df = (DefaultTableModel)tableBooks.getModel();
                Df.setRowCount(0);

                while(rs.next()){
                    Vector v1 = new Vector();
                    
                    for(int i = 1 ; i <=c;i++){
                        v1.add(rs.getString("bookID"));
                        v1.add(rs.getString("bookName"));
                        v1.add(rs.getString("authorName"));
                        v1.add(rs.getString("ISBN"));
                        v1.add(rs.getString("referBook"));
                        v1.add(rs.getString("course"));
                        v1.add(rs.getString("loaned"));
                        v1.add(rs.getString("loaner"));
                        v1.add(rs.getString("dueDate"));
                    }
                    Df.addRow(v1);
                    
                }
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
   
    }
    public void dvdTable_update(){
        int c;
        serach.setText("Serach DVDs by ID");
        TabbedPaneHome.setEnabledAt(0, false);
        TabbedPaneHome.setEnabledAt(1, true);
        TabbedPaneHome.setSelectedIndex(1);
            try {

                insert = con1.prepareStatement("select * from dvds");
                ResultSet rs = insert.executeQuery();
                ResultSetMetaData Rss = rs.getMetaData();
                c = Rss.getColumnCount();
               
                DefaultTableModel Df = (DefaultTableModel)tableDVDs.getModel();
                Df.setRowCount(0);
                while(rs.next()){
                    Vector v1 = new Vector();
                    
                    for(int i = 1 ; i <=c;i++){
                        v1.add(rs.getString("dvdID"));
                        v1.add(rs.getString("ItemName"));
                        v1.add(rs.getString("directorName"));
                        v1.add(rs.getString("makerStudio"));
                        v1.add(rs.getString("Subtitled"));
                        v1.add(rs.getString("loaned"));
                        v1.add(rs.getString("loaner"));
                        v1.add(rs.getString("dueDate"));
                        
                    }
                    Df.addRow(v1);
                }
             }
            catch (SQLException ex) {
                Logger.getLogger(AddDVD.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Database Requrments Not Found...","Warning !",JOptionPane.WARNING_MESSAGE);

            }
   
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Home homeObj = new Home(user);
                homeObj.setVisible(true);
                homeObj.booksTable_update();
                
                
                try{
                   homeObj.setIconImage(ImageIO.read(new File("book.png")));
                }
                catch(IOException ex){
                    System.out.println("Error Logo"+ex);
                }
            }
        });
    }
    public javax.swing.JMenuBar getTimeBar(){
        return timeBar;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FilterLable;
    private javax.swing.JButton Serach;
    private javax.swing.JTabbedPane TabbedPaneHome;
    private javax.swing.JButton addLibItem;
    private javax.swing.JRadioButton books;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JMenu date;
    private javax.swing.JButton delete;
    private javax.swing.JRadioButton dvds;
    private javax.swing.JComboBox<String> filter;
    private javax.swing.JButton issueLibItem;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton logout;
    private javax.swing.JButton renew;
    private javax.swing.JButton returnLibItem;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel serach;
    private javax.swing.JButton settings;
    private javax.swing.JScrollPane tabbedBook;
    private javax.swing.JScrollPane tabbedDVDs;
    private javax.swing.JTable tableBooks;
    private javax.swing.JTable tableDVDs;
    private javax.swing.JMenu time;
    private javax.swing.JMenuBar timeBar;
    private javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
